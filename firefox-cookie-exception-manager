#!env python3
import sqlite3
import argparse
import configparser
import os.path
import sys
from datetime import datetime


"""
What to insert in table moz_perms:

id: automanaged by database
origin: host (e.g. https://duckduckgo.com)
type: cookie
permission: 8 (for session) or 1 (for indefinite)
expireType: 0
expireTime: 0
modificationTime: unix epoch in ms
"""

def eprint(*args, **kwargs):
	print(*args, file=sys.stderr, **kwargs)

def createParser():
	parser = argparse.ArgumentParser(description="Tool to manage cookie exceptions of a firefox profile")
	parser.add_argument("-P", metavar="profile", dest="profile_name", help="Start with <profile>")
	parser.add_argument("--profile", metavar="path", dest="profile_path", help="Start with profile at <path>")
	parser.add_argument("--import", "-i", dest="import_file", metavar="file", help="Import exceptions from file or stdin")
	parser.add_argument("--list", "-l", action="store_true", help="List exceptions")
	parser.add_argument("--clear", action="store_true", help="Clear all cookie exceptions")
	parser.add_argument("--update-existing", action="store_true", help="Update existing cookie exceptions instead of skipping them while importing")
	return parser

def getDefaultProfilePath():
	firefoxDirectory = os.path.expanduser("~/.mozilla/firefox")
	config = configparser.ConfigParser()
	config.read(os.path.join(firefoxDirectory, "profiles.ini"))
	
	profilePath = None
	for section in config.sections():
		if section.startswith("Install"):
			if profilePath is not None:
				eprint("Multiple firefox installs, ambigious default profile")
				exit(1)
			profilePath = config[section]["Default"]
	
	return profilePath

def getProfiles():
	firefoxDirectory = os.path.expanduser("~/.mozilla/firefox")
	config = configparser.ConfigParser()
	config.read(os.path.join(firefoxDirectory, "profiles.ini"))

	profiles = dict()
	for section in config.sections():
		if section.startswith("Profile") and config[section].get("Name") is not None:
			profileIsRelative = config[section]["IsRelative"]  # 1=relative,0=absoute
			if profileIsRelative is None or profileIsRelative == "1":  
				profilePath = os.path.join(firefoxDirectory, config[section]["Path"])
			elif profileIsRelative == "0":
				profilePath = config[section]["Path"]
			else:
				raise RuntimeError(f"Missing or unknown value for profile isRelative attribute: '{profileIsRelative}'")

			profiles[config[section]["Name"]] = profilePath
	return profiles

def verifyRule(ruleParts):
	if len(ruleParts) != 3:
		return False

	if "://" not in ruleParts[0]:  # verify host
		return False

	# Check if permission has a valid value
	if ruleParts[1] not in ("always", "session"):
		return False

	try:  # Try check if datestring is in correct isoformat
		datetime.fromisoformat(ruleParts[2])
	except ValueError:
		return False

	return True

def importFromFile(cursor, filePath, updateExisting=False):
	if filePath == "-":  # Read from stdin
		rules = sys.stdin.readlines()
	else:
		with open(filePath, "r") as importFile:
			rules = importFile.readlines()

	# Verify the rules first
	for rule in rules:
		ruleParts = rule.strip("\n").split("\t")
		if not verifyRule(ruleParts):
			eprint("Malformed input") 
			exit(1)

	# Import the rules
	for rule in rules:
		ruleParts = rule.strip("\n").split("\t")
		origin = ruleParts[0]
		permission = 1 if ruleParts[1] == "always" else 8
		modificationTime = int(datetime.fromisoformat(ruleParts[2]).timestamp() * 1000)

	
		cursor.execute("SELECT origin FROM moz_perms WHERE type = 'cookie' AND origin = ?", [origin])
		if cursor.fetchone() is None:  # No cookie exception exists for this host
			print("Imporing", ruleParts)
			cursor.execute("INSERT INTO moz_perms(origin,type,permission,expireType,expireTime,modificationTime) VALUES(?,'cookie',?,0,0,?)", [origin,permission,modificationTime])
		elif updateExisting:  # Update existing cookie exception
			print("Updating", ruleParts)
			cursor.execute("UPDATE moz_perms set permission = ?, modificationTime = ? WHERE type = 'cookie' AND origin=?", [permission,modificationTime, origin])
		else:  # Skip
			print("Skipping", ruleParts)
			pass

def listExceptions(cursor):
	cursor.execute("SELECT origin,permission,modificationTime FROM moz_perms WHERE type = 'cookie'")
	for entry in cursor.fetchall():
		if entry["permission"] not in (1, 8):
			eprint("Unknown value in permission attribute, please contact the developer")

		permissionText = "session" if entry["permission"] == 8 else "always"
		isoDate = datetime.fromtimestamp(entry["modificationTime"] / 1000)

		print(entry["origin"] + "\t" + permissionText + "\t" + isoDate.isoformat())

def confirm(msg):
	userInput = input(msg)
	return userInput.lower() == 'y'

if __name__ == "__main__":
	parser = createParser()
	args = parser.parse_args()

	# Extract the firefox profile path by parsing arguments
	if args.profile_name is None and args.profile_path is None:  # Use default profile
		firefoxProfilePath = getDefaultProfilePath()
	elif args.profile_name is not None:  # Get profile by given profile name:
		firefoxProfilePath = getProfiles().get(args.profile_name)
		if firefoxProfilePath is None:
			eprint("No profile with that given name was found")
			exit(1)
	elif args.profile_path is not None:  # Get profile by given profile path
		firefoxProfilePath = args.profile_path
		if not os.path.isdir(filefoxProfilePath):
			eprint("Given profile path is not a directory")
			exit(1)
	else:  # Error case
		eprint("Please choose a profile either by name or by path")
		exit(1)
	
	# Init database connection
	dbPath = os.path.join(firefoxProfilePath, "permissions.sqlite")
	if not os.path.isfile(dbPath):
		eprint("Database file could not be found")
		exit(1)
	con = sqlite3.connect(dbPath)
	con.row_factory = sqlite3.Row  # Enable dict based indexing
	cursor = con.cursor()

	# Execution of task
	if args.clear:  # Clear all cookie exceptions from database
		if confirm("Do you really want to clear all cookie exception from this profile? (y/n) "):
			deletedCount = con.execute("DELETE FROM moz_perms WHERE type = 'cookie'").rowcount
			con.commit()  # Save changes
			print(deletedCount, "cookie exceptions were successfully deleted")
		else:
			eprint("Aborted")
			exit(0)
	
	if args.import_file is not None:
		if args.import_file != "-" and not os.path.isfile(args.import_file):
			eprint("Given import file does not exist")
			exit(1)
		importFromFile(cursor, args.import_file, args.update_existing)
		con.commit()  # Save changes
	
	if args.list:
		listExceptions(cursor)

