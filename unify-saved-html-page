#!/bin/python3
import lxml.html
import lxml.etree
import base64
import re
import os
import argparse
from urllib.parse import unquote

controlChars = dict.fromkeys(range(32))
controlChars.pop(ord("\n"))

def removeControlCharacters(string):
	return string.translate(controlChars)

def bakeInImage(imageElement):
	src = unquote(imageElement.get("src"))
	isAlreadyInBase64 = re.search("^data:/image/[0-9A-Za-z]+;base64", src) is not None

	if not isAlreadyInBase64 and os.path.isfile(src):
		extension = re.search(r"\.(.{3,4})$", src).groups()[0].upper()
		base64Header = f"data:image/{extension};base64,"
		with open(src, "rb") as imageFile:
			encoded = base64.b64encode(imageFile.read()).decode('ascii')
		imageElement.set("src", base64Header + encoded)
		print(f"Replaced image: '{src}'")

def bakeInStylesheet(root, styleElement):
	src = unquote(styleElement.get("href"))
	if os.path.isfile(src):
		with open(src, "r") as stylesheetFile:
			style = lxml.etree.Element("style")
			#style.text = removeControlCharacters(stylesheetFile.read())
			style.text = stylesheetFile.read()
		root.append(style)
		root.remove(styleElement)
		print(f"Replaced stylesheet: '{src}'")

def bakeInScript(scriptElement):
	if scriptElement.get("src") is not None:
		src = unquote(scriptElement.get("src"))
		if os.path.isfile(src):
			with open(src, "r") as scriptFile:
				#scriptElement.text = removeControlCharacters(scriptFile.read())
				scriptElement.text = scriptFile.read()
			scriptElement.attrib.pop("src", None)
			print(f"Replaced script: '{src}'")

def recurse(root, keepScripts, keepStylesheets, keepImages):
	for child in root.getchildren():
		if child.tag == "img":
			if keepImages and child.get("src") is not None:
				bakeInImage(child)
			else:
				root.remove(child)
				print("Removed image")

		elif child.tag == "link" and child.get("rel") == "stylesheet":
			if keepStylesheets:
				bakeInStylesheet(root, child)
			else:
				root.remove(child)
				print("Removed stylesheet")

		elif child.tag == "script":
			if keepScripts:
				bakeInScript(child)
			else:
				root.remove(child)
				print("Removed script")

		else: # Other tag
			recurse(child, keepScripts, keepStylesheets, keepImages)


def main(filePath, keepScripts=False, keepStylesheets=False, keepImages=False):
	filePath = os.path.abspath(filePath)
	os.chdir(os.path.dirname(filePath))
	fileName = os.path.basename(filePath)

	with open(fileName, "r") as file:
		html = lxml.html.parse(file)

	recurse(html.getroot(), keepScripts, keepStylesheets, keepImages)

	html.write("unified_page.html", encoding="utf8")

if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("filePath", type=str, help="Path to the html file which is to be unified")
	parser.add_argument("-s", "--remove-scripts", action="store_true", help="Remove scripts")
	parser.add_argument("-i", "--remove-images", action="store_true", help="Remove images")
	parser.add_argument("-c", "--remove-stylesheets", action="store_true", help="Remove stylesheets")
	args = parser.parse_args()
	main(args.filePath, not args.remove_scripts, not args.remove_stylesheets, not args.remove_images)
	print("Unified the file successfully")

